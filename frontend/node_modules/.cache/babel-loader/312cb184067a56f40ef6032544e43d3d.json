{"ast":null,"code":"import _slicedToArray from \"/home/tiago/Documentos/SivOnline-github/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/tiago/Documentos/SivOnline-github/frontend/src/components/Chronometer/index.tsx\";\n\nimport React, { useState, useEffect } from 'react';\n\nvar Chronometer = function Chronometer() {\n  var _useState = useState('start'),\n      _useState2 = _slicedToArray(_useState, 2),\n      startStop = _useState2[0],\n      setStartStop = _useState2[1];\n\n  var _useState3 = useState('00:00'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      time = _useState4[0],\n      setTime = _useState4[1];\n\n  var cronometro;\n  var min = 0;\n  var seg = 0;\n\n  function changeTime(status) {\n    if (status === 'start') {\n      cronometro = setInterval(function () {\n        runTime();\n      }, 1000);\n      setStartStop('stop');\n    } else {\n      clearInterval(cronometro);\n      setStartStop('start');\n    }\n  }\n\n  function runTime() {\n    seg++;\n\n    if (seg == 60) {\n      seg = 0;\n      min++;\n    }\n  }\n\n  useEffect(function () {\n    setTime(\"\".concat(min, \":\").concat(seg));\n  }, [seg, min]);\n\n  function reset() {\n    clearInterval(cronometro);\n    min = 0;\n    seg = 0;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      return changeTime(startStop);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, startStop), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: reset,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, \"reset\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, time));\n};\n\nexport default Chronometer;","map":{"version":3,"sources":["/home/tiago/Documentos/SivOnline-github/frontend/src/components/Chronometer/index.tsx"],"names":["React","useState","useEffect","Chronometer","startStop","setStartStop","time","setTime","cronometro","min","seg","changeTime","status","setInterval","runTime","clearInterval","reset"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;AAGA,IAAMC,WAAqB,GAAG,SAAxBA,WAAwB,GAAM;AAAA,kBACAF,QAAQ,CAAC,OAAD,CADR;AAAA;AAAA,MAC3BG,SAD2B;AAAA,MAChBC,YADgB;;AAAA,mBAEVJ,QAAQ,CAAC,OAAD,CAFE;AAAA;AAAA,MAE3BK,IAF2B;AAAA,MAErBC,OAFqB;;AAGlC,MAAIC,UAAJ;AACA,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAG,CAAV;;AACA,WAASC,UAAT,CAAoBC,MAApB,EAAmC;AAClC,QAAGA,MAAM,KAAG,OAAZ,EAAoB;AACnBJ,MAAAA,UAAU,GAAGK,WAAW,CAAC,YAAI;AAACC,QAAAA,OAAO;AAAG,OAAhB,EAAkB,IAAlB,CAAxB;AACAT,MAAAA,YAAY,CAAC,MAAD,CAAZ;AACA,KAHD,MAGK;AACJU,MAAAA,aAAa,CAACP,UAAD,CAAb;AAEAH,MAAAA,YAAY,CAAC,OAAD,CAAZ;AAEA;AACD;;AACD,WAASS,OAAT,GAAkB;AAChBJ,IAAAA,GAAG;;AACH,QAAGA,GAAG,IAAE,EAAR,EAAW;AACTA,MAAAA,GAAG,GAAG,CAAN;AACAD,MAAAA,GAAG;AACJ;AACF;;AACHP,EAAAA,SAAS,CAAC,YAAI;AACZK,IAAAA,OAAO,WAAIE,GAAJ,cAAWC,GAAX,EAAP;AACD,GAFQ,EAEP,CAACA,GAAD,EAAMD,GAAN,CAFO,CAAT;;AAGE,WAASO,KAAT,GAAgB;AACdD,IAAAA,aAAa,CAACP,UAAD,CAAb;AACAC,IAAAA,GAAG,GAAG,CAAN;AACAC,IAAAA,GAAG,GAAG,CAAN;AACD;;AAED,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAS,IAAA,OAAO,EAAE;AAAA,aAAIC,UAAU,CAACP,SAAD,CAAd;AAAA,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8CA,SAA9C,CADF,eAEE;AAAQ,IAAA,OAAO,EAAEY,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,IADH,CAHF,CADF;AASD,CA1CD;;AA4CA,eAAeH,WAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\n\n\nconst Chronometer: React.FC = () => {\n  const [startStop, setStartStop] = useState('start')\n  const [time, setTime] = useState('00:00')\n  var cronometro : number\n  var min = 0\n  var seg = 0\n  function changeTime(status: string){\n   if(status==='start'){\n    cronometro = setInterval(()=>{runTime()}, 1000)\n    setStartStop('stop')\n   }else{\n    clearInterval(cronometro)\n   \n    setStartStop('start')\n\n   }\n  }\n  function runTime(){\n    seg++\n    if(seg==60){\n      seg = 0\n      min++\n    }\n  }\nuseEffect(()=>{\n  setTime(`${min}:${seg}`)\n},[seg, min])\n  function reset(){\n    clearInterval(cronometro)\n    min = 0\n    seg = 0\n  }\n\n  return(\n    <div>\n      <button  onClick={()=>changeTime(startStop)}>{startStop}</button>\n      <button onClick={reset}>reset</button>\n      <div>\n        {time}\n      </div>\n    </div>\n  )\n};\n\nexport default Chronometer;"]},"metadata":{},"sourceType":"module"}