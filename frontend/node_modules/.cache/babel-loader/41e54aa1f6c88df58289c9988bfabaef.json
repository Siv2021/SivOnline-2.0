{"ast":null,"code":"var _jsxFileName = \"/home/tiago/Documentos/SivOnline-github/frontend/src/App.tsx\";\nimport React from 'react';\nimport Global from './styles/Global';\nimport Routes from './routes';\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Global, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Routes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 6\n    }\n  }));\n}\n\nexport default App; // import React, { useState } from \"react\"\n// import PropTypes from \"prop-types\"\n// import { JitsiOptions, JitsiRoom } from \"@cs125/react-jitsi\"\n// import { Menu } from \"semantic-ui-react\"\n// export interface JitsiMultiRoomProps {\n//   domain: string\n//   roomNames: string[]\n//   options: Omit<JitsiOptions, \"roomName\">\n// }\n// export const JitsiMultiRoom: React.FC<JitsiMultiRoomProps> = (props) => {\n//   const { domain, roomNames } = props\n//   const [room, setRoom] = useState<string | undefined>(undefined)\n//   return (\n//     <div>\n//       <Menu>\n//         {roomNames.map((name, key) => (\n//           <Menu.Item\n//             key={key}\n//             name={name}\n//             active={room === name}\n//             content={name}\n//             onClick={(_, { name }): void => (name === room ? setRoom(undefined) : setRoom(name))}\n//           />\n//         ))}\n//       </Menu>\n//       {room && (\n//         <JitsiRoom\n//           domain={domain}\n//           options={{\n//             ...props.options,\n//             roomName: room,\n//             noSSL: false,\n//             configOverwrite: {\n//               openBridgeChannel: \"websocket\",\n//             },\n//           }}\n//         />\n//       )}\n//     </div>\n//   )\n// }\n// JitsiMultiRoom.propTypes = {\n//   domain: PropTypes.string.isRequired,\n//   roomNames: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n//   options: PropTypes.any,\n// }","map":{"version":3,"sources":["/home/tiago/Documentos/SivOnline-github/frontend/src/App.tsx"],"names":["React","Global","Routes","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,SAASC,GAAT,GAAe;AACb,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,CADF;AAOD;;AAED,eAAeA,GAAf,C,CACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\n\r\nimport Global from './styles/Global'\r\nimport Routes from './routes'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Global/>\r\n     <Routes/>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n// import React, { useState } from \"react\"\r\n// import PropTypes from \"prop-types\"\r\n\r\n// import { JitsiOptions, JitsiRoom } from \"@cs125/react-jitsi\"\r\n// import { Menu } from \"semantic-ui-react\"\r\n\r\n// export interface JitsiMultiRoomProps {\r\n//   domain: string\r\n//   roomNames: string[]\r\n//   options: Omit<JitsiOptions, \"roomName\">\r\n// }\r\n// export const JitsiMultiRoom: React.FC<JitsiMultiRoomProps> = (props) => {\r\n//   const { domain, roomNames } = props\r\n//   const [room, setRoom] = useState<string | undefined>(undefined)\r\n\r\n//   return (\r\n//     <div>\r\n//       <Menu>\r\n//         {roomNames.map((name, key) => (\r\n//           <Menu.Item\r\n//             key={key}\r\n//             name={name}\r\n//             active={room === name}\r\n//             content={name}\r\n//             onClick={(_, { name }): void => (name === room ? setRoom(undefined) : setRoom(name))}\r\n//           />\r\n//         ))}\r\n//       </Menu>\r\n//       {room && (\r\n//         <JitsiRoom\r\n//           domain={domain}\r\n//           options={{\r\n//             ...props.options,\r\n//             roomName: room,\r\n//             noSSL: false,\r\n//             configOverwrite: {\r\n//               openBridgeChannel: \"websocket\",\r\n//             },\r\n//           }}\r\n//         />\r\n//       )}\r\n//     </div>\r\n//   )\r\n// }\r\n// JitsiMultiRoom.propTypes = {\r\n//   domain: PropTypes.string.isRequired,\r\n//   roomNames: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n//   options: PropTypes.any,\r\n// }"]},"metadata":{},"sourceType":"module"}