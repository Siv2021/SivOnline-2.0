{"ast":null,"code":"import _objectSpread from \"/home/tiago/Documentos/SivOnline-github/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/home/tiago/Documentos/SivOnline-github/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/tiago/Documentos/SivOnline-github/frontend/src/App.tsx\";\n\n// import React from 'react';\n// import Global from './styles/Global'\n// import Routes from './routes'\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <Global/>\n//      <Routes/>\n//     </div>\n//   );\n// }\n// export default App;\nimport React, { useState } from \"react\"; // import PropTypes from \"prop-types\"\n\nimport { JitsiRoom } from \"@cs125/react-jitsi\";\nimport { Menu } from \"semantic-ui-react\";\nvar props = {\n  domain: 'Tiago',\n  roomNames: ['Test100', 'Teste101', 'Teste102'],\n  options: {\n    roomName: 'Teste100'\n  }\n};\nexport var App = function App() {\n  var domain = props.domain,\n      roomNames = props.roomNames;\n\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      room = _useState2[0],\n      setRoom = _useState2[1];\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Menu, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, roomNames.map(function (name, key) {\n    return /*#__PURE__*/React.createElement(Menu.Item, {\n      key: key,\n      name: name,\n      active: room === name,\n      content: name,\n      onClick: function onClick(_, _ref) {\n        var name = _ref.name;\n        return name === room ? setRoom(undefined) : setRoom(name);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    });\n  })), room && /*#__PURE__*/React.createElement(JitsiRoom, {\n    domain: domain,\n    options: _objectSpread(_objectSpread({}, props.options), {}, {\n      roomName: room,\n      noSSL: false,\n      configOverwrite: {\n        openBridgeChannel: \"websocket\"\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }));\n}; // App.propTypes = {\n//   domain: PropTypes.string.isRequired,\n//   roomNames: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n//   options: PropTypes.any,\n// }\n\nexport default App;","map":{"version":3,"sources":["/home/tiago/Documentos/SivOnline-github/frontend/src/App.tsx"],"names":["React","useState","JitsiRoom","Menu","props","domain","roomNames","options","roomName","App","undefined","room","setRoom","map","name","key","_","noSSL","configOverwrite","openBridgeChannel"],"mappings":";;;;;;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;;AAEA,SAAuBC,SAAvB,QAAwC,oBAAxC;AACA,SAASC,IAAT,QAAqB,mBAArB;AAOA,IAAMC,KAAK,GAAG;AACZC,EAAAA,MAAM,EAAE,OADI;AAEZC,EAAAA,SAAS,EAAE,CAAC,SAAD,EAAY,UAAZ,EAAwB,UAAxB,CAFC;AAGZC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE;AADH;AAHG,CAAd;AAQA,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAAA,MACfJ,MADe,GACOD,KADP,CACfC,MADe;AAAA,MACPC,SADO,GACOF,KADP,CACPE,SADO;;AAAA,kBAECL,QAAQ,CAAqBS,SAArB,CAFT;AAAA;AAAA,MAEhBC,IAFgB;AAAA,MAEVC,OAFU;;AAIvB,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,SAAS,CAACO,GAAV,CAAc,UAACC,IAAD,EAAOC,GAAP;AAAA,wBACb,oBAAC,IAAD,CAAM,IAAN;AACE,MAAA,GAAG,EAAEA,GADP;AAEE,MAAA,IAAI,EAAED,IAFR;AAGE,MAAA,MAAM,EAAEH,IAAI,KAAKG,IAHnB;AAIE,MAAA,OAAO,EAAEA,IAJX;AAKE,MAAA,OAAO,EAAE,iBAACE,CAAD;AAAA,YAAMF,IAAN,QAAMA,IAAN;AAAA,eAAwBA,IAAI,KAAKH,IAAT,GAAgBC,OAAO,CAACF,SAAD,CAAvB,GAAqCE,OAAO,CAACE,IAAD,CAApE;AAAA,OALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADa;AAAA,GAAd,CADH,CADF,EAYGH,IAAI,iBACH,oBAAC,SAAD;AACE,IAAA,MAAM,EAAEN,MADV;AAEE,IAAA,OAAO,kCACFD,KAAK,CAACG,OADJ;AAELC,MAAAA,QAAQ,EAAEG,IAFL;AAGLM,MAAAA,KAAK,EAAE,KAHF;AAILC,MAAAA,eAAe,EAAE;AACfC,QAAAA,iBAAiB,EAAE;AADJ;AAJZ,MAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbJ,CADF;AA4BD,CAhCM,C,CAiCP;AACA;AACA;AACA;AACA;;AAEA,eAAeV,GAAf","sourcesContent":["// import React from 'react';\r\n\r\n// import Global from './styles/Global'\r\n// import Routes from './routes'\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <Global/>\r\n//      <Routes/>\r\n\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\nimport React, { useState } from \"react\"\r\n// import PropTypes from \"prop-types\"\r\n\r\nimport { JitsiOptions, JitsiRoom } from \"@cs125/react-jitsi\"\r\nimport { Menu } from \"semantic-ui-react\"\r\n\r\nexport interface JitsiMultiRoomProps {\r\n  domain: string\r\n  roomNames: string[]\r\n  options: Omit<JitsiOptions, \"roomName\">\r\n}\r\nconst props = {\r\n  domain: 'Tiago',\r\n  roomNames: ['Test100', 'Teste101', 'Teste102'],\r\n  options: {\r\n    roomName: 'Teste100',\r\n  }\r\n\r\n}\r\nexport const App = () => {\r\n  const { domain, roomNames } = props\r\n  const [room, setRoom] = useState<string | undefined>(undefined)\r\n\r\n  return (\r\n    <div>\r\n      <Menu>\r\n        {roomNames.map((name, key) => (\r\n          <Menu.Item\r\n            key={key}\r\n            name={name}\r\n            active={room === name}\r\n            content={name}\r\n            onClick={(_, { name }): void => (name === room ? setRoom(undefined) : setRoom(name))}\r\n          />\r\n        ))}\r\n      </Menu>\r\n      {room && (\r\n        <JitsiRoom\r\n          domain={domain}\r\n          options={{\r\n            ...props.options,\r\n            roomName: room,\r\n            noSSL: false,\r\n            configOverwrite: {\r\n              openBridgeChannel: \"websocket\",\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n// App.propTypes = {\r\n//   domain: PropTypes.string.isRequired,\r\n//   roomNames: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n//   options: PropTypes.any,\r\n// }\r\n\r\nexport default App"]},"metadata":{},"sourceType":"module"}