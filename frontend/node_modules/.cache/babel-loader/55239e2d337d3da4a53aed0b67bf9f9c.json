{"ast":null,"code":"import _classCallCheck from \"/home/tiago/Documentos/SivOnline-github/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tiago/Documentos/SivOnline-github/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/tiago/Documentos/SivOnline-github/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/tiago/Documentos/SivOnline-github/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/tiago/Documentos/SivOnline-github/frontend/src/components/Chronometer/index.js\";\nimport React, { Component } from 'react';\nimport io from 'socket.io-client';\nvar socket = io('http://localhost:3001');\n\nvar Chronometer = /*#__PURE__*/function (_Component) {\n  _inherits(Chronometer, _Component);\n\n  var _super = _createSuper(Chronometer);\n\n  function Chronometer(props) {\n    var _this;\n\n    _classCallCheck(this, Chronometer);\n\n    _this = _super.call(this, props);\n\n    _this.doIntervalChange = function () {\n      _this.myInterval = setInterval(function () {\n        _this.setState(function (prevState) {\n          return {\n            count: prevState.count - 1\n          };\n        });\n      }, 1000);\n    };\n\n    _this.state = {\n      count: 1,\n      status: 'start'\n    };\n    return _this;\n  }\n\n  _createClass(Chronometer, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var count = this.state.count;\n\n      if (this.props.moderator) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 11\n          }\n        }, count), /*#__PURE__*/React.createElement(\"button\", {\n          name: this.state.status,\n          onClick: function onClick() {\n            if (_this2.state.status === 'start') {\n              console.log(_this2.state.status);\n\n              _this2.doIntervalChange();\n\n              _this2.setState({\n                count: _this2.state.count,\n                status: 'stop'\n              });\n            } else {\n              console.log(_this2.state.status);\n              clearInterval(_this2.myInterval);\n\n              _this2.setState({\n                count: _this2.state.count,\n                status: 'start'\n              });\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 11\n          }\n        }, this.state.status), /*#__PURE__*/React.createElement(\"button\", {\n          onClick: function onClick() {\n            socket.emit('startStop');\n\n            _this2.setState({\n              count: _this2.props.startCount\n            });\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 11\n          }\n        }, \"Reset\"));\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }\n      }, count));\n    } // setInterval\n    // clearInterval\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      var startCount = this.props.startCount;\n      this.setState({\n        count: startCount\n      });\n      socket.on('chronometer', function () {\n        if (_this3.state.status === 'start') {\n          console.log(_this3.state.status);\n\n          _this3.doIntervalChange();\n\n          _this3.setState({\n            count: _this3.state.count,\n            status: 'stop'\n          });\n        } else {\n          console.log(_this3.state.status);\n          clearInterval(_this3.myInterval);\n\n          _this3.setState({\n            count: _this3.state.count,\n            status: 'start'\n          });\n        }\n      }); // this.doIntervalChange()\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.myInterval);\n    }\n  }]);\n\n  return Chronometer;\n}(Component);\n\nexport default Chronometer;","map":{"version":3,"sources":["/home/tiago/Documentos/SivOnline-github/frontend/src/components/Chronometer/index.js"],"names":["React","Component","io","socket","Chronometer","props","doIntervalChange","myInterval","setInterval","setState","prevState","count","state","status","moderator","console","log","clearInterval","emit","startCount","on"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react'\nimport io from 'socket.io-client'\nconst socket = io('http://localhost:3001')\nclass Chronometer extends Component {\n\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      count: 1,\n      status: 'start'\n    }\n  }\n  render () {\n    const {count} = this.state\n    if(this.props.moderator){\n      return (\n        <div>\n          <h1>{count}</h1>\n          <button name={this.state.status} onClick={()=>{if(this.state.status==='start'){\n            console.log(this.state.status)\n             this.doIntervalChange()\n             this.setState({\n               count: this.state.count,\n               status: 'stop'\n             })\n      }else{\n        console.log(this.state.status)\n  \n  \n        clearInterval(this.myInterval)\n        this.setState({\n          count: this.state.count,\n          status: 'start'\n        })\n          }}}>{this.state.status}</button>\n          <button onClick={()=>{socket.emit('startStop'); this.setState({count: this.props.startCount})}}>Reset</button>\n        </div>\n      )\n    }\n    return (\n      <div>\n        <h1>{count}</h1>\n      </div>\n    )\n  }\n\n  // setInterval\n  // clearInterval\n  componentDidMount () {\n    const {startCount} = this.props\n    this.setState({\n      count: startCount\n    })\n    socket.on('chronometer', ()=>{\n      if(this.state.status==='start'){\n       console.log(this.state.status) \n       this.doIntervalChange()\n       this.setState({\n        count: this.state.count,\n        status: 'stop'\n      })\n     }else{\n       console.log(this.state.status)\n       clearInterval(this.myInterval)\n       this.setState({\n         count: this.state.count,\n         status: 'start'\n       })\n     }\n   })\n    // this.doIntervalChange()\n  }\n\n  doIntervalChange = () => {\n      this.myInterval = setInterval(() => {\n      this.setState(prevState => ({\n        count: prevState.count - 1\n      }))\n    }, 1000)\n  }\n\n  componentWillUnmount () {\n    clearInterval(this.myInterval)\n  }\n}\n\nexport default Chronometer"]},"metadata":{},"sourceType":"module"}