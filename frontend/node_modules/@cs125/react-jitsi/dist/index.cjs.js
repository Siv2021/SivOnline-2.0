'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));

const JitsiWrapperContext = React__default.createContext({
    loaded: false,
    url: "",
});
const JitsiWrapper = ({ url, children }) => {
    const [loaded, setLoaded] = React.useState(false);
    React.useEffect(() => {
        const script = Object.assign(document.createElement("script"), {
            src: `${url}/external_api.js`,
            async: true,
            defer: true,
        });
        script.onload = () => {
            setLoaded(true);
        };
        document.head.appendChild(script);
        return () => {
            document.head.removeChild(script);
        };
    }, []);
    return React__default.createElement(JitsiWrapperContext.Provider, { value: { loaded, url } }, children);
};
JitsiWrapper.propTypes = {
    url: PropTypes.string.isRequired,
    children: PropTypes.node.isRequired,
};
const withJitsiContext = () => {
    return React.useContext(JitsiWrapperContext);
};
const WithJitsiContext = ({ children }) => {
    return children(withJitsiContext());
};
WithJitsiContext.propTypes = {
    children: PropTypes.func.isRequired,
};
const jitsiOptionDefaults = {
    width: "100%",
    height: "100%",
    noSSL: true,
};
const JitsiRoom = (props) => {
    const { loaded } = React.useContext(JitsiWrapperContext);
    const { domain } = props;
    const options = Object.assign({}, jitsiOptionDefaults, props.options);
    const id = props.id || "jitsi";
    let api;
    React.useEffect(() => {
        if (!loaded) {
            return;
        }
        api = new JitsiMeetExternalAPI(domain, {
            parentNode: document.querySelector(`#${id}`),
            ...options,
        });
        props.apiChanged && props.apiChanged(api);
        return () => {
            api === null || api === void 0 ? void 0 : api.dispose();
        };
    }, [loaded, JSON.stringify({ domain, options })]);
    return React__default.createElement("div", { id: id || "jitsi", style: props.style || {} });
};
JitsiRoom.propTypes = {
    domain: PropTypes.string.isRequired,
    options: PropTypes.shape({
        roomName: PropTypes.string.isRequired,
        width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        configOverwrite: PropTypes.object,
        interfaceConfigOverwrite: PropTypes.object,
        noSSL: PropTypes.bool,
        jwt: PropTypes.string,
    }).isRequired,
    id: PropTypes.string,
    style: PropTypes.object,
    apiChanged: PropTypes.func,
};

exports.JitsiRoom = JitsiRoom;
exports.JitsiWrapper = JitsiWrapper;
exports.WithJitsiContext = WithJitsiContext;
exports.jitsiOptionDefaults = jitsiOptionDefaults;
exports.withJitsiContext = withJitsiContext;
//# sourceMappingURL=index.cjs.js.map
